name: Test Docker Metadata

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: ''
        type: string
      ref:
        description: 'Ref to release'
        required: false
        default: ''
        type: string
      enabled:
        description: 'Enable the raw tag'
        required: false
        default: true
        type: boolean
#  push:
#    branches:
#      - main
#      - meta
#    tags:
#      - 'v*'

run-name: "version = ${{ inputs.version }} | ref = ${{ inputs.ref }}"

jobs:
  resolve-config:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.git-ref.outputs.value }}
      refType: ${{ steps.git-ref.outputs.type }}
      refSha: ${{ steps.git-ref.outputs.sha }}
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || inputs.version }}
      - name: Resolve ref type
        # Resolves the git reference value and type of it (tag, branch, sha)
        id: git-ref
        run: |
          value="${{ inputs.ref || inputs.version }}"
          echo "value=$value" > $GITHUB_OUTPUT
          
          type=$(git cat-file -t "$value")
          if [[ "$type" == "tag" ]]; then
            echo "type=tag" >> $GITHUB_OUTPUT
          elif [[ "$type" == "commit" && "$(git branch --show-current)" == "$value" ]]; then
            echo "type=branch" >> $GITHUB_OUTPUT
          else
            echo "type=sha" >> $GITHUB_OUTPUT
          fi
          
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "::group::Outputs:"
          cat $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Sanitize version
        # Adjust version to meet docker tag requirements
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ inputs.version }}';
            sanitized = version.replace(/[^a-zA-Z0-9._-]+/g, '-')
            sanitized = sanitized.substring(0, 128)
            core.setOutput('value', sanitized)
            await core.group("Outpust", async () => {
              core.info(`value: ${sanitized}`);
            })

  dockerize:
    runs-on: ubuntu-latest
    needs: resolve-config
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.resolve-config.outputs.ref }}
      - name: Resolve docker configuration
        id: resolve-docker
        uses: actions/github-script@v7
        with:
          script: |
            return {
                image: "4chainstudio/ghaction-polygon",
                isDockerhub: true,
                isGhcr: false,
            }

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # [sha-issue] There is an issue with metadata-action when we checkout sha and use git context
          # Because of [sha-issue] we're choosing the context
          context: ${{ needs.resolve-config.outputs.refType != 'sha' && 'git' || 'workflow' }}
          images: ${{ fromJSON(steps.resolve-docker.outputs.result).image }}
          # Because of [sha-issue] we're setting short sha by ourselves
          tags: |
            type=raw,value=latest,enable=${{ needs.resolve-config.outputs.refType == 'tag' }}
            type=raw,value=${{ needs.resolve-config.outputs.version }}
            type=semver,prefix=v,pattern={{version}},enable=${{ needs.resolve-config.outputs.refType != 'sha' }}
            type=semver,prefix=v,pattern={{major}}.{{minor}},enable=${{ needs.resolve-config.outputs.refType != 'sha' }}
            type=semver,prefix=v,pattern={{major}},enable=${{ needs.resolve-config.outputs.refType != 'sha' }}
            type=semver,pattern={{raw}},enable=${{ needs.resolve-config.outputs.refType != 'sha' }}
            type=raw,prefix=sha-,value=${{ needs.resolve-config.outputs.refSha }}
          labels: |
            ${{ fromJSON(steps.resolve-docker.outputs.result).isDockerhub && format('org.opencontainers.image.url=https://hub.docker.com/r/{0}', fromJSON(steps.resolve-docker.outputs.result).image) }}
            ${{ needs.resolve-config.outputs.refType == 'sha' && format('org.opencontainers.image.revision={0}', needs.resolve-config.outputs.ref) }}

