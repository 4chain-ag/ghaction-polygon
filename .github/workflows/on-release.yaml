name: On Release
permissions:
  contents: write

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: "Version of the app to release"
      os:
        description: "Comma separated list of OS for which the binary should be built"
        default: 'linux,darwin'
        required: false
        type: string
      go_version:
        required: false
        type: string
        default: '1.21'
        description: "Version of Go which should be used to perform the checks"
      cgo_enabled:
        required: false
        type: boolean
        default: false
        description: "Should set the CGO_ENABLED env and the compilers"
      release_binaries:
        required: false
        type: boolean
        default: true
        description: "If the packages with binaries should be attached to release"


env:
  OS_MAPPING: | 
    {
      'darwin': 'macos-latest',
      'linux': 'ubuntu-latest'
    }
    

jobs:
  resolve-config:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.result }}
      workflow: ${{ steps.workflow.outputs.result }}
    steps:
      - id: os
        uses: actions/github-script@v6
        with:
          script: |
            const systems = '${{ inputs.os }}'
            const osToImage = ${{ env.OS_MAPPING }}
            
            return systems.split(',').map(os => osToImage[os]);
      - id: workflow
        uses: actions/github-script@v6
        with:
          script: |
            const workflowRef = '${{github.workflow_ref}}'
            const parts = workflowRef.split('@')[0].split('/')
            return {
              repository: `${{github.server_url}}/${parts[0]}/${parts[1]}`,
              owner: parts[0],
              repo_name: parts[1],
              file: parts.slice(2).join('/')
            }

  build:
    needs: [resolve-config]
    strategy:
      matrix:
        os: ${{ fromJSON(needs.resolve-config.outputs.os) }}
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: ${{ inputs.cgo_enabled && '1' || '0' }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Build
        uses: bactions/build-go@v0
        with:
          go_version: ${{ inputs.go_version }}
      - name: "Create release if there isn't"
        if: inputs.release_binaries
        run: |
          GH_PAGER=cat gh release view ${{ inputs.version }} --json name \
          || gh release create ${{ inputs.version }} -t "Release ${{ inputs.version }}" --latest --draft -F dist/CHANGELOG.md 

      - name: Add binaries to release
        if: inputs.release_binaries
        run: |
          gh release upload ${{ inputs.version }} \
          dist/${{ github.event.repository.name }}*.tar.gz \
          dist/${{ github.event.repository.name }}*_checksums.txt \
          --clobber

  dockerize:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: resolve-docker
        uses: actions/github-script@v6
        with:
          script: |
            const image = '${{ inputs.docker_image }}'
            const inputRegistry = '${{ inputs.docker_registry }}' 
            const isDockerhub = inputRegistry == 'dockerhub'
            const registry = isDockerhub ? '' : inputRegistry
            const organisation = '${{ inputs.docker_org || vars.DOCKER_ORG || secrets.DOCKER_USERNAME || github.repository_owner }}'
            const imageName = '${{ inputs.docker_image_name || vars.DOCKER_IMAGE_NAME || github.event.repository.name }}'            
            const username = '${{ secrets.DOCKER_USERNAME || github.repository_owner }}'
            const password = '${{ secrets.DOCKER_PASSWORD }}'
            const ghToken = '${{ github.token }}'
            return {
                image: image || `${registry ? registry + '/' : ''}${organisation}/${imageName}`,
                username: username,
                password: password ? password : !isDockerhub ? ghToken : '',
                registry: registry
            }

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ fromJSON(steps.resolve-docker.outputs.result).image }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{version}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ fromJSON(steps.resolve-docker.outputs.result).registry }}
          username: ${{ fromJSON(steps.resolve-docker.outputs.result).username }}
          password: ${{ fromJSON(steps.resolve-docker.outputs.result).password }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./release/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            project_name=${{ github.event.repository.name }}
            tag=${{ github.ref_name }}
            src_url=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}
            version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            revision=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
