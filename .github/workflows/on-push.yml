name: "On push changes"

on:
  push:
    branches-ignore:
      - main
      - master

# TODO make inputs from this
env:
  GO_VERSION: '1.20'
  MAIN_FILE: 'cmd/main.go'

permissions:
  contents: write

jobs:
  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    outputs:
      updatedCode: ${{ steps.commit.outputs.pushed }}
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.RELEASE_KEY }}

      ################################################
      # Prepare programming language environment
      ################################################
      - uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}

      ############################################################
      # generate - run generation of go files if needed
      ############################################################

      # TODO: choose a common way to do that

      ############
      # go mod
      ############
      - name: Go Module tidy
        run: go mod tidy

      ############
      # YAML lint
      ############
      - name: Run yaml linter
        id: yaml-lint
        uses: ibiqlik/action-yamllint@v3.1
        with:
          config_data: |
            extends: default
            ignore:
              - swagger.yaml
              - .golangci.yml
            rules:
              truthy:
                check-keys: false
              document-start:
                present: false
                level: warning
              line-length:
                max: 120
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: yamllint-logfile
          path: ${{ steps.yaml-lint.outputs.logfile }}

      - name: clean yaml-lint log
        if: always()
        run: rm ${{ steps.yaml-lint.outputs.logfile }}


      ############################################################
      # linelint - add new lines at the end of files if needed
      ############################################################

      # TODO: run a command to do so, or adjust (modify) linelint action for that

      ########################
      # lint & fix code style
      ########################

      # TODO: split golangci-lint configurations for code style and errors
      # consider unexcluding config files in a yaml lint step (above)

      ###################
      # Push changes
      ###################
      - name: "Commit & Push"
        id: commit
        if: always()
        uses: EndBug/add-and-commit@v9
        with:
          message: "chore: update generated files"
          default_author: github_actions

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [code-style]
    if: ${{ !cancelled() && needs.code-style.outputs.updatedCode != 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs: [code-style]
    if: ${{ !cancelled() && needs.code-style.outputs.updatedCode != 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}
      - name: Go Build
        run: go build -v ./...


  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [code-style]
    if: ${{ !cancelled() && needs.code-style.outputs.updatedCode != 'true' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{env.GO_VERSION}}

      # Install gotestfmt on the VM running the action.
      - name: Set up gotestfmt
        uses: GoTestTools/gotestfmt-action@v2

      # Run tests with nice formatting. Save the original log in /tmp/gotest.log
      - name: Run tests
        run: |
          set -euo pipefail
          go test -json -coverprofile=coverage.txt -covermode=atomic -v ./... 2>&1 | tee gotest.log | gotestfmt

      # Upload the original go test log as an artifact for later review.
      - name: Upload test & coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-report
          path: |
            gotest.log
            coverage.txt
          if-no-files-found: error

      - name: Update code coverage
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v3.1.4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          fail_ci_if_error: false # optional (default = false)
          verbose: true # optional (default = false)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
